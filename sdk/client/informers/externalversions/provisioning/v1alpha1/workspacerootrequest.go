//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	provisioningv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/provisioning/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	provisioningv1alpha1listers "github.com/kcp-dev/kcp/sdk/client/listers/provisioning/v1alpha1"
)

// WorkspaceRootRequestClusterInformer provides access to a shared informer and lister for
// WorkspaceRootRequests.
type WorkspaceRootRequestClusterInformer interface {
	Cluster(logicalcluster.Name) WorkspaceRootRequestInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() provisioningv1alpha1listers.WorkspaceRootRequestClusterLister
}

type workspaceRootRequestClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewWorkspaceRootRequestClusterInformer constructs a new informer for WorkspaceRootRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkspaceRootRequestClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredWorkspaceRootRequestClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredWorkspaceRootRequestClusterInformer constructs a new informer for WorkspaceRootRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkspaceRootRequestClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ProvisioningV1alpha1().WorkspaceRootRequests().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ProvisioningV1alpha1().WorkspaceRootRequests().Watch(context.TODO(), options)
			},
		},
		&provisioningv1alpha1.WorkspaceRootRequest{},
		resyncPeriod,
		indexers,
	)
}

func (f *workspaceRootRequestClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredWorkspaceRootRequestClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *workspaceRootRequestClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&provisioningv1alpha1.WorkspaceRootRequest{}, f.defaultInformer)
}

func (f *workspaceRootRequestClusterInformer) Lister() provisioningv1alpha1listers.WorkspaceRootRequestClusterLister {
	return provisioningv1alpha1listers.NewWorkspaceRootRequestClusterLister(f.Informer().GetIndexer())
}

// WorkspaceRootRequestInformer provides access to a shared informer and lister for
// WorkspaceRootRequests.
type WorkspaceRootRequestInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() provisioningv1alpha1listers.WorkspaceRootRequestLister
}

func (f *workspaceRootRequestClusterInformer) Cluster(clusterName logicalcluster.Name) WorkspaceRootRequestInformer {
	return &workspaceRootRequestInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type workspaceRootRequestInformer struct {
	informer cache.SharedIndexInformer
	lister   provisioningv1alpha1listers.WorkspaceRootRequestLister
}

func (f *workspaceRootRequestInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *workspaceRootRequestInformer) Lister() provisioningv1alpha1listers.WorkspaceRootRequestLister {
	return f.lister
}

type workspaceRootRequestScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *workspaceRootRequestScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&provisioningv1alpha1.WorkspaceRootRequest{}, f.defaultInformer)
}

func (f *workspaceRootRequestScopedInformer) Lister() provisioningv1alpha1listers.WorkspaceRootRequestLister {
	return provisioningv1alpha1listers.NewWorkspaceRootRequestLister(f.Informer().GetIndexer())
}

// NewWorkspaceRootRequestInformer constructs a new informer for WorkspaceRootRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkspaceRootRequestInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredWorkspaceRootRequestInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredWorkspaceRootRequestInformer constructs a new informer for WorkspaceRootRequest type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkspaceRootRequestInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ProvisioningV1alpha1().WorkspaceRootRequests().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ProvisioningV1alpha1().WorkspaceRootRequests().Watch(context.TODO(), options)
			},
		},
		&provisioningv1alpha1.WorkspaceRootRequest{},
		resyncPeriod,
		indexers,
	)
}

func (f *workspaceRootRequestScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredWorkspaceRootRequestInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
