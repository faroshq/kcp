//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	provisioningv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/provisioning/v1alpha1"
)

// WorkspaceRootRequestClusterLister can list WorkspaceRootRequests across all workspaces, or scope down to a WorkspaceRootRequestLister for one workspace.
// All objects returned here must be treated as read-only.
type WorkspaceRootRequestClusterLister interface {
	// List lists all WorkspaceRootRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*provisioningv1alpha1.WorkspaceRootRequest, err error)
	// Cluster returns a lister that can list and get WorkspaceRootRequests in one workspace.
	Cluster(clusterName logicalcluster.Name) WorkspaceRootRequestLister
	WorkspaceRootRequestClusterListerExpansion
}

type workspaceRootRequestClusterLister struct {
	indexer cache.Indexer
}

// NewWorkspaceRootRequestClusterLister returns a new WorkspaceRootRequestClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewWorkspaceRootRequestClusterLister(indexer cache.Indexer) *workspaceRootRequestClusterLister {
	return &workspaceRootRequestClusterLister{indexer: indexer}
}

// List lists all WorkspaceRootRequests in the indexer across all workspaces.
func (s *workspaceRootRequestClusterLister) List(selector labels.Selector) (ret []*provisioningv1alpha1.WorkspaceRootRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*provisioningv1alpha1.WorkspaceRootRequest))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get WorkspaceRootRequests.
func (s *workspaceRootRequestClusterLister) Cluster(clusterName logicalcluster.Name) WorkspaceRootRequestLister {
	return &workspaceRootRequestLister{indexer: s.indexer, clusterName: clusterName}
}

// WorkspaceRootRequestLister can list all WorkspaceRootRequests, or get one in particular.
// All objects returned here must be treated as read-only.
type WorkspaceRootRequestLister interface {
	// List lists all WorkspaceRootRequests in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*provisioningv1alpha1.WorkspaceRootRequest, err error)
	// Get retrieves the WorkspaceRootRequest from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*provisioningv1alpha1.WorkspaceRootRequest, error)
	WorkspaceRootRequestListerExpansion
}

// workspaceRootRequestLister can list all WorkspaceRootRequests inside a workspace.
type workspaceRootRequestLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all WorkspaceRootRequests in the indexer for a workspace.
func (s *workspaceRootRequestLister) List(selector labels.Selector) (ret []*provisioningv1alpha1.WorkspaceRootRequest, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*provisioningv1alpha1.WorkspaceRootRequest))
	})
	return ret, err
}

// Get retrieves the WorkspaceRootRequest from the indexer for a given workspace and name.
func (s *workspaceRootRequestLister) Get(name string) (*provisioningv1alpha1.WorkspaceRootRequest, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(provisioningv1alpha1.Resource("workspacerootrequests"), name)
	}
	return obj.(*provisioningv1alpha1.WorkspaceRootRequest), nil
}

// NewWorkspaceRootRequestLister returns a new WorkspaceRootRequestLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewWorkspaceRootRequestLister(indexer cache.Indexer) *workspaceRootRequestScopedLister {
	return &workspaceRootRequestScopedLister{indexer: indexer}
}

// workspaceRootRequestScopedLister can list all WorkspaceRootRequests inside a workspace.
type workspaceRootRequestScopedLister struct {
	indexer cache.Indexer
}

// List lists all WorkspaceRootRequests in the indexer for a workspace.
func (s *workspaceRootRequestScopedLister) List(selector labels.Selector) (ret []*provisioningv1alpha1.WorkspaceRootRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*provisioningv1alpha1.WorkspaceRootRequest))
	})
	return ret, err
}

// Get retrieves the WorkspaceRootRequest from the indexer for a given workspace and name.
func (s *workspaceRootRequestScopedLister) Get(name string) (*provisioningv1alpha1.WorkspaceRootRequest, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(provisioningv1alpha1.Resource("workspacerootrequests"), name)
	}
	return obj.(*provisioningv1alpha1.WorkspaceRootRequest), nil
}
